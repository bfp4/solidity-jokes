{
  "contractName": "Jokes",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "jokes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "joke",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "punchline",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "jokesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "string",
          "name": "joke",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "punchline",
          "type": "string"
        }
      ],
      "name": "setJoke",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jokes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"joke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"punchline\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jokesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"joke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"punchline\",\"type\":\"string\"}],\"name\":\"setJoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"project:/contracts/Jokes.sol\":\"Jokes\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/Jokes.sol\":{\"keccak256\":\"0xcd9fcffcdde73db202117e9c598d79972490bd48ebbe514f033fc84bc382baff\",\"urls\":[\"bzz-raw://d8386f2d54c1a538fce3babd00cd72a33e8afaeb1e1fe48e48d670af241dfd39\",\"dweb:/ipfs/QmcaWRiwRsZ3sW1KVbNmJdcXYWS6WDRfsA46kcYpyxF6N1\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806388bd395f14610046578063a64d499814610198578063bc0fbb21146102b2575b600080fd5b6101966004803603604081101561005c57600080fd5b810190808035906020019064010000000081111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111640100000000831117156100ad57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561011057600080fd5b82018360208201111561012257600080fd5b8035906020019184600183028401116401000000008311171561014457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506102d0565b005b6101c4600480360360208110156101ae57600080fd5b810190808035906020019092919050505061035d565b604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561020e5780820151818401526020810190506101f3565b50505050905090810190601f16801561023b5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610274578082015181840152602081019050610259565b50505050905090810190601f1680156102a15780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b6102ba6104b7565b6040518082815260200191505060405180910390f35b6000808154809291906001019190505550604051806060016040528060005481526020018381526020018281525060016000805481526020019081526020016000206000820151816000015560208201518160010190805190602001906103389291906104bd565b5060408201518160020190805190602001906103559291906104bd565b509050505050565b6001602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561040f5780601f106103e45761010080835404028352916020019161040f565b820191906000526020600020905b8154815290600101906020018083116103f257829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ad5780601f10610482576101008083540402835291602001916104ad565b820191906000526020600020905b81548152906001019060200180831161049057829003601f168201915b5050505050905083565b60005481565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106104fe57805160ff191683800117855561052c565b8280016001018555821561052c579182015b8281111561052b578251825591602001919060010190610510565b5b509050610539919061053d565b5090565b61055f91905b8082111561055b576000816000905550600101610543565b5090565b9056fea265627a7a72315820f1dff88522feb83c3f42621ea1c9a01ab81bf40aee625bf531677b32379c7a4c64736f6c63430005100032",
  "sourceMap": "76:2688:0:-;;;123:1;98:26;;271:2318;8:9:-1;5:2;;;30:1;27;20:12;5:2;271:2318:0;303:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:7;;;:96;;:::i;:::-;410:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:7;;;:48;;:::i;:::-;469:658;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:7;;;:658;;:::i;:::-;1138:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:7;;;:93;;:::i;:::-;1242:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:7;;;:83;;:::i;:::-;1336:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:7;;;:84;;:::i;:::-;1431:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:7;;;:89;;:::i;:::-;1531:499;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:7;;;:499;;:::i;:::-;2041:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:7;;;:64;;:::i;:::-;2116:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:7;;;:102;;:::i;:::-;2229:352;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:7;;;:352;;:::i;:::-;76:2688;;2597:164;2677:10;;:12;;;;;;;;;;;;;2720:33;;;;;;;;2725:10;;2720:33;;;;2737:4;2720:33;;;;2743:9;2720:33;;;2700:5;:17;2706:10;;2700:17;;;;;;;;;;;:53;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2597:164;;:::o;76:2688::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "76:2688:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;76:2688:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2597:164;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2597:164:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;2597:164:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2597:164:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;2597:164:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2597:164:0;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;2597:164:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2597:164:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;2597:164:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2597:164:0;;;;;;;;;;;;;;;:::i;:::-;;228:34;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;228:34:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;228:34:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;228:34:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;98:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2597:164;2677:10;;:12;;;;;;;;;;;;;2720:33;;;;;;;;2725:10;;2720:33;;;;2737:4;2720:33;;;;2743:9;2720:33;;;2700:5;:17;2706:10;;2700:17;;;;;;;;;;;:53;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2597:164;;:::o;228:34::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;98:26::-;;;;:::o;76:2688::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "// SPDX-License-Identifier: UNLISENCED\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\ncontract Jokes {\r\n    uint public jokesCount = 0;\r\n\r\n    struct Joke {\r\n        uint id;\r\n        string joke;\r\n        string punchline;\r\n    }\r\n\r\n    mapping(uint => Joke) public jokes;\r\n\r\n    constructor() public {\r\n        setJoke(\"What's the best thing about Switzerland?\", \"I don't know, but the flag is a big plus.\");\r\n        setJoke(\"I invented a new word!\", \"Plagiarism!\");\r\n        setJoke(\"\", \"In my neighborhood, there was a couple who had given their twin sons very weird names. One was named Trouble, while the other boy's name was Mind Your Own Business. So, one day they were playing hide and seek. Mind Your Business counted to a hundred and then started looking for his brother. But, somehow he couldn't find him anywhere. He saw a police car passing the neighborhood, so he stopped it to ask for help. When the police officer asked him for his name, he replied, 'Mind Your Own Business!' Feeling insulted, the police officer still asked politely who he was looking for. Mind Your Own Business replied, 'I am looking for Trouble!'\");\r\n        setJoke(\"Did you hear about the claustrophobic astronaut?\", \"He just needed a little space.\");\r\n        setJoke(\"Why did the yogurt go to the art exhibition?\", \"Because it was cultured.\");\r\n        setJoke(\"What do you call an apology written in dots and dashes?\", \"Re-Morse code.\");\r\n        setJoke(\"Why did the hipster burn his mouth?\", \"He drank the coffee before it was cool.\");\r\n        setJoke(\"\", \" I was in a barbershop when a man and his young son walked in to get a haircut. The man asked the barber to give his son a haircut while he shopped for groceries nearby. The barber finished giving the haircut but there was no sign of the father. An hour passed, two hours passed. We finally asked the son where his father was. The boy shocked us by saying, 'That man was not my father. He just told me that if I wanted to get a free haircut at the barbershop, I should come with him.'\");\r\n        setJoke(\"What do you get from a pampered cow?\", \"Spoiled milk.\");\r\n        setJoke(\"What breed of dog can jump higher than buildings?\", \"Any dog, because buildings can't jump.\");\r\n        setJoke(\"\", \"As a group of robbers entered the bank, their leader went to the manager and asked him to open the vault. He threatened the manager by saying, 'If you try to do anything smart, you're fiction.' The manager was confused and asked him, 'Don't you mean 'You are history'?' The robber angrily replied back, 'Do not change the subject, okay?'\");\r\n    }\r\n\r\n    function setJoke(string memory joke, string memory punchline) public {\r\n        jokesCount++;\r\n        jokes[jokesCount] = Joke(jokesCount, joke, punchline);\r\n    }\r\n}",
  "sourcePath": "C:\\Users\\gener\\OneDrive\\Desktop\\Github\\solidity-jokes\\contracts\\Jokes.sol",
  "ast": {
    "absolutePath": "project:/contracts/Jokes.sol",
    "exportedSymbols": {
      "Jokes": [
        96
      ]
    },
    "id": 97,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".22",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "40:32:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 96,
        "linearizedBaseContracts": [
          96
        ],
        "name": "Jokes",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 4,
            "name": "jokesCount",
            "nodeType": "VariableDeclaration",
            "scope": 96,
            "src": "98:26:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "98:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "30",
              "id": 3,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "123:1:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "canonicalName": "Jokes.Joke",
            "id": 11,
            "members": [
              {
                "constant": false,
                "id": 6,
                "name": "id",
                "nodeType": "VariableDeclaration",
                "scope": 11,
                "src": "156:7:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "156:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 8,
                "name": "joke",
                "nodeType": "VariableDeclaration",
                "scope": 11,
                "src": "174:11:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 7,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "174:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 10,
                "name": "punchline",
                "nodeType": "VariableDeclaration",
                "scope": 11,
                "src": "196:16:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 9,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "196:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Joke",
            "nodeType": "StructDefinition",
            "scope": 96,
            "src": "133:87:0",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 15,
            "name": "jokes",
            "nodeType": "VariableDeclaration",
            "scope": 96,
            "src": "228:34:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Joke_$11_storage_$",
              "typeString": "mapping(uint256 => struct Jokes.Joke)"
            },
            "typeName": {
              "id": 14,
              "keyType": {
                "id": 12,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "236:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "228:21:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Joke_$11_storage_$",
                "typeString": "mapping(uint256 => struct Jokes.Joke)"
              },
              "valueType": {
                "contractScope": null,
                "id": 13,
                "name": "Joke",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 11,
                "src": "244:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Joke_$11_storage_ptr",
                  "typeString": "struct Jokes.Joke"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 73,
              "nodeType": "Block",
              "src": "292:2297:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "576861742773207468652062657374207468696e672061626f757420537769747a65726c616e643f",
                        "id": 19,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "311:42:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_097b195636f9cbef85f5416471ea23a888dbc6343e646e81ea0678b308806864",
                          "typeString": "literal_string \"What's the best thing about Switzerland?\""
                        },
                        "value": "What's the best thing about Switzerland?"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4920646f6e2774206b6e6f772c206275742074686520666c616720697320612062696720706c75732e",
                        "id": 20,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "355:43:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_eed0618017a4e108a248a5b8be203c7e710878d15391fcf1d6a2d19fc1148aee",
                          "typeString": "literal_string \"I don't know, but the flag is a big plus.\""
                        },
                        "value": "I don't know, but the flag is a big plus."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_097b195636f9cbef85f5416471ea23a888dbc6343e646e81ea0678b308806864",
                          "typeString": "literal_string \"What's the best thing about Switzerland?\""
                        },
                        {
                          "typeIdentifier": "t_stringliteral_eed0618017a4e108a248a5b8be203c7e710878d15391fcf1d6a2d19fc1148aee",
                          "typeString": "literal_string \"I don't know, but the flag is a big plus.\""
                        }
                      ],
                      "id": 18,
                      "name": "setJoke",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 95,
                      "src": "303:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 21,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "303:96:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 22,
                  "nodeType": "ExpressionStatement",
                  "src": "303:96:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "4920696e76656e7465642061206e657720776f726421",
                        "id": 24,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "418:24:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6eb81b039c5c5bf5d26576877a91bfc476bbe23865bb32ae241a3f1c8c3e82bc",
                          "typeString": "literal_string \"I invented a new word!\""
                        },
                        "value": "I invented a new word!"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "506c616769617269736d21",
                        "id": 25,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "444:13:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6c7da35e51da3a040eb53be4e61caeb0672d21bd168cab425f42f8519da1f5a7",
                          "typeString": "literal_string \"Plagiarism!\""
                        },
                        "value": "Plagiarism!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_6eb81b039c5c5bf5d26576877a91bfc476bbe23865bb32ae241a3f1c8c3e82bc",
                          "typeString": "literal_string \"I invented a new word!\""
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6c7da35e51da3a040eb53be4e61caeb0672d21bd168cab425f42f8519da1f5a7",
                          "typeString": "literal_string \"Plagiarism!\""
                        }
                      ],
                      "id": 23,
                      "name": "setJoke",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 95,
                      "src": "410:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 26,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "410:48:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27,
                  "nodeType": "ExpressionStatement",
                  "src": "410:48:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "",
                        "id": 29,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "477:2:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "496e206d79206e65696768626f72686f6f642c20746865726520776173206120636f75706c652077686f2068616420676976656e207468656972207477696e20736f6e732076657279207765697264206e616d65732e204f6e6520776173206e616d65642054726f75626c652c207768696c6520746865206f7468657220626f792773206e616d6520776173204d696e6420596f7572204f776e20427573696e6573732e20536f2c206f6e65206461792074686579207765726520706c6179696e67206869646520616e64207365656b2e204d696e6420596f757220427573696e65737320636f756e74656420746f20612068756e6472656420616e64207468656e2073746172746564206c6f6f6b696e6720666f72206869732062726f746865722e204275742c20736f6d65686f7720686520636f756c646e27742066696e642068696d20616e7977686572652e20486520736177206120706f6c696365206361722070617373696e6720746865206e65696768626f72686f6f642c20736f2068652073746f7070656420697420746f2061736b20666f722068656c702e205768656e2074686520706f6c696365206f6666696365722061736b65642068696d20666f7220686973206e616d652c206865207265706c6965642c20274d696e6420596f7572204f776e20427573696e6573732127204665656c696e6720696e73756c7465642c2074686520706f6c696365206f666669636572207374696c6c2061736b656420706f6c6974656c792077686f20686520776173206c6f6f6b696e6720666f722e204d696e6420596f7572204f776e20427573696e657373207265706c6965642c20274920616d206c6f6f6b696e6720666f722054726f75626c652127",
                        "id": 30,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "481:645:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1554fbdcaca6859ce9a18170911248d96086c1e6be8296fd981b94ab01bda307",
                          "typeString": "literal_string \"In my neighborhood, there was a couple who had given their twin sons very weird names. One was named Trouble, while the other boy's name was Mind Your Own Business. So, one day they were playing hide and seek. Mind Your Business counted to a hundred and then started looking for his brother. But, somehow he couldn't find him anywhere. He saw a police car passing the neighborhood, so he stopped it to ask for help. When the police officer asked him for his name, he replied, 'Mind Your Own Business!' Feeling insulted, the police officer still asked politely who he was looking for. Mind Your Own Business replied, 'I am looking for Trouble!'\""
                        },
                        "value": "In my neighborhood, there was a couple who had given their twin sons very weird names. One was named Trouble, while the other boy's name was Mind Your Own Business. So, one day they were playing hide and seek. Mind Your Business counted to a hundred and then started looking for his brother. But, somehow he couldn't find him anywhere. He saw a police car passing the neighborhood, so he stopped it to ask for help. When the police officer asked him for his name, he replied, 'Mind Your Own Business!' Feeling insulted, the police officer still asked politely who he was looking for. Mind Your Own Business replied, 'I am looking for Trouble!'"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1554fbdcaca6859ce9a18170911248d96086c1e6be8296fd981b94ab01bda307",
                          "typeString": "literal_string \"In my neighborhood, there was a couple who had given their twin sons very weird names. One was named Trouble, while the other boy's name was Mind Your Own Business. So, one day they were playing hide and seek. Mind Your Business counted to a hundred and then started looking for his brother. But, somehow he couldn't find him anywhere. He saw a police car passing the neighborhood, so he stopped it to ask for help. When the police officer asked him for his name, he replied, 'Mind Your Own Business!' Feeling insulted, the police officer still asked politely who he was looking for. Mind Your Own Business replied, 'I am looking for Trouble!'\""
                        }
                      ],
                      "id": 28,
                      "name": "setJoke",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 95,
                      "src": "469:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 31,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "469:658:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 32,
                  "nodeType": "ExpressionStatement",
                  "src": "469:658:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "44696420796f7520686561722061626f75742074686520636c61757374726f70686f62696320617374726f6e6175743f",
                        "id": 34,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1146:50:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8713e6e222748625aa906e76d123025b838ffdc6e345205728adbfa70a00c4cd",
                          "typeString": "literal_string \"Did you hear about the claustrophobic astronaut?\""
                        },
                        "value": "Did you hear about the claustrophobic astronaut?"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4865206a757374206e65656465642061206c6974746c652073706163652e",
                        "id": 35,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1198:32:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d14abf1900cf1a4d739015d8388e4e2f3951f439ed4acee1ece0230b4ff1c71f",
                          "typeString": "literal_string \"He just needed a little space.\""
                        },
                        "value": "He just needed a little space."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_8713e6e222748625aa906e76d123025b838ffdc6e345205728adbfa70a00c4cd",
                          "typeString": "literal_string \"Did you hear about the claustrophobic astronaut?\""
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d14abf1900cf1a4d739015d8388e4e2f3951f439ed4acee1ece0230b4ff1c71f",
                          "typeString": "literal_string \"He just needed a little space.\""
                        }
                      ],
                      "id": 33,
                      "name": "setJoke",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 95,
                      "src": "1138:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 36,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1138:93:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 37,
                  "nodeType": "ExpressionStatement",
                  "src": "1138:93:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "576879206469642074686520796f6775727420676f20746f20746865206172742065786869626974696f6e3f",
                        "id": 39,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1250:46:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d1268c80db442142696ec9cc9a67011bcd75dbb4541a9eba394a536d28a97056",
                          "typeString": "literal_string \"Why did the yogurt go to the art exhibition?\""
                        },
                        "value": "Why did the yogurt go to the art exhibition?"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "42656361757365206974207761732063756c74757265642e",
                        "id": 40,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1298:26:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b45fcffb98366ffd92a1d6c212d2ea63e1f3c9b2bb3ca869dc1e6de902dbfa35",
                          "typeString": "literal_string \"Because it was cultured.\""
                        },
                        "value": "Because it was cultured."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_d1268c80db442142696ec9cc9a67011bcd75dbb4541a9eba394a536d28a97056",
                          "typeString": "literal_string \"Why did the yogurt go to the art exhibition?\""
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b45fcffb98366ffd92a1d6c212d2ea63e1f3c9b2bb3ca869dc1e6de902dbfa35",
                          "typeString": "literal_string \"Because it was cultured.\""
                        }
                      ],
                      "id": 38,
                      "name": "setJoke",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 95,
                      "src": "1242:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 41,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1242:83:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 42,
                  "nodeType": "ExpressionStatement",
                  "src": "1242:83:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "5768617420646f20796f752063616c6c20616e2061706f6c6f6779207772697474656e20696e20646f747320616e64206461736865733f",
                        "id": 44,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1344:57:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_679129f0f887d654ad62280afd16b9eed6f61c922dd3295f0de025761a5d2bcc",
                          "typeString": "literal_string \"What do you call an apology written in dots and dashes?\""
                        },
                        "value": "What do you call an apology written in dots and dashes?"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "52652d4d6f72736520636f64652e",
                        "id": 45,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1403:16:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4901f0f5768b552ba650711232bbb310b18ff4c60350adfb99d344d4960b4ade",
                          "typeString": "literal_string \"Re-Morse code.\""
                        },
                        "value": "Re-Morse code."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_679129f0f887d654ad62280afd16b9eed6f61c922dd3295f0de025761a5d2bcc",
                          "typeString": "literal_string \"What do you call an apology written in dots and dashes?\""
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4901f0f5768b552ba650711232bbb310b18ff4c60350adfb99d344d4960b4ade",
                          "typeString": "literal_string \"Re-Morse code.\""
                        }
                      ],
                      "id": 43,
                      "name": "setJoke",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 95,
                      "src": "1336:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 46,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1336:84:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 47,
                  "nodeType": "ExpressionStatement",
                  "src": "1336:84:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "57687920646964207468652068697073746572206275726e20686973206d6f7574683f",
                        "id": 49,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1439:37:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6d03c621f27068910ef0c8904632b6cf00321e1e89f7054cba14a3124ebd4b76",
                          "typeString": "literal_string \"Why did the hipster burn his mouth?\""
                        },
                        "value": "Why did the hipster burn his mouth?"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4865206472616e6b2074686520636f66666565206265666f72652069742077617320636f6f6c2e",
                        "id": 50,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1478:41:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4f671ff17695acf7b50b3fb9e4df3840d90343bedbd6a40f359897209af89594",
                          "typeString": "literal_string \"He drank the coffee before it was cool.\""
                        },
                        "value": "He drank the coffee before it was cool."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_6d03c621f27068910ef0c8904632b6cf00321e1e89f7054cba14a3124ebd4b76",
                          "typeString": "literal_string \"Why did the hipster burn his mouth?\""
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4f671ff17695acf7b50b3fb9e4df3840d90343bedbd6a40f359897209af89594",
                          "typeString": "literal_string \"He drank the coffee before it was cool.\""
                        }
                      ],
                      "id": 48,
                      "name": "setJoke",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 95,
                      "src": "1431:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 51,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1431:89:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 52,
                  "nodeType": "ExpressionStatement",
                  "src": "1431:89:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "",
                        "id": 54,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1539:2:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "20492077617320696e20612062617262657273686f70207768656e2061206d616e20616e642068697320796f756e6720736f6e2077616c6b656420696e20746f20676574206120686169726375742e20546865206d616e2061736b6564207468652062617262657220746f20676976652068697320736f6e20612068616972637574207768696c652068652073686f7070656420666f722067726f636572696573206e65617262792e20546865206261726265722066696e697368656420676976696e672074686520686169726375742062757420746865726520776173206e6f207369676e206f6620746865206661746865722e20416e20686f7572207061737365642c2074776f20686f757273207061737365642e2057652066696e616c6c792061736b65642074686520736f6e2077686572652068697320666174686572207761732e2054686520626f792073686f636b656420757320627920736179696e672c202754686174206d616e20776173206e6f74206d79206661746865722e204865206a75737420746f6c64206d65207468617420696620492077616e74656420746f20676574206120667265652068616972637574206174207468652062617262657273686f702c20492073686f756c6420636f6d6520776974682068696d2e27",
                        "id": 55,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1543:486:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e059b0099b4aa13ca1d54b5e0d69e5375bd0d547c97d89f7aed2b8fbd4208919",
                          "typeString": "literal_string \" I was in a barbershop when a man and his young son walked in to get a haircut. The man asked the barber to give his son a haircut while he shopped for groceries nearby. The barber finished giving the haircut but there was no sign of the father. An hour passed, two hours passed. We finally asked the son where his father was. The boy shocked us by saying, 'That man was not my father. He just told me that if I wanted to get a free haircut at the barbershop, I should come with him.'\""
                        },
                        "value": " I was in a barbershop when a man and his young son walked in to get a haircut. The man asked the barber to give his son a haircut while he shopped for groceries nearby. The barber finished giving the haircut but there was no sign of the father. An hour passed, two hours passed. We finally asked the son where his father was. The boy shocked us by saying, 'That man was not my father. He just told me that if I wanted to get a free haircut at the barbershop, I should come with him.'"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e059b0099b4aa13ca1d54b5e0d69e5375bd0d547c97d89f7aed2b8fbd4208919",
                          "typeString": "literal_string \" I was in a barbershop when a man and his young son walked in to get a haircut. The man asked the barber to give his son a haircut while he shopped for groceries nearby. The barber finished giving the haircut but there was no sign of the father. An hour passed, two hours passed. We finally asked the son where his father was. The boy shocked us by saying, 'That man was not my father. He just told me that if I wanted to get a free haircut at the barbershop, I should come with him.'\""
                        }
                      ],
                      "id": 53,
                      "name": "setJoke",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 95,
                      "src": "1531:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 56,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1531:499:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 57,
                  "nodeType": "ExpressionStatement",
                  "src": "1531:499:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "5768617420646f20796f75206765742066726f6d20612070616d706572656420636f773f",
                        "id": 59,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2049:38:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e58db5450a425eccb1f2e8cbe07e91f6cf9b1297955d4fd0fdf64e7ddc008fdb",
                          "typeString": "literal_string \"What do you get from a pampered cow?\""
                        },
                        "value": "What do you get from a pampered cow?"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "53706f696c6564206d696c6b2e",
                        "id": 60,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2089:15:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4a3a9c4c0070b9bcff9800a96f8a9be9c1d9399bc48d9c3dce159102e52ed1f0",
                          "typeString": "literal_string \"Spoiled milk.\""
                        },
                        "value": "Spoiled milk."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_e58db5450a425eccb1f2e8cbe07e91f6cf9b1297955d4fd0fdf64e7ddc008fdb",
                          "typeString": "literal_string \"What do you get from a pampered cow?\""
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4a3a9c4c0070b9bcff9800a96f8a9be9c1d9399bc48d9c3dce159102e52ed1f0",
                          "typeString": "literal_string \"Spoiled milk.\""
                        }
                      ],
                      "id": 58,
                      "name": "setJoke",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 95,
                      "src": "2041:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 61,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2041:64:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 62,
                  "nodeType": "ExpressionStatement",
                  "src": "2041:64:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "57686174206272656564206f6620646f672063616e206a756d7020686967686572207468616e206275696c64696e67733f",
                        "id": 64,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2124:51:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4eeef4c150718b2e547cd4c4b4fddbb8878b9b8797b9399a37589b028ca2d210",
                          "typeString": "literal_string \"What breed of dog can jump higher than buildings?\""
                        },
                        "value": "What breed of dog can jump higher than buildings?"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "416e7920646f672c2062656361757365206275696c64696e67732063616e2774206a756d702e",
                        "id": 65,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2177:40:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_57cc716367f24fabacf49bf7a865b40909f8af30c746a97d261fc0232ed0b0a7",
                          "typeString": "literal_string \"Any dog, because buildings can't jump.\""
                        },
                        "value": "Any dog, because buildings can't jump."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_4eeef4c150718b2e547cd4c4b4fddbb8878b9b8797b9399a37589b028ca2d210",
                          "typeString": "literal_string \"What breed of dog can jump higher than buildings?\""
                        },
                        {
                          "typeIdentifier": "t_stringliteral_57cc716367f24fabacf49bf7a865b40909f8af30c746a97d261fc0232ed0b0a7",
                          "typeString": "literal_string \"Any dog, because buildings can't jump.\""
                        }
                      ],
                      "id": 63,
                      "name": "setJoke",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 95,
                      "src": "2116:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 66,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2116:102:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 67,
                  "nodeType": "ExpressionStatement",
                  "src": "2116:102:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "",
                        "id": 69,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2237:2:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "417320612067726f7570206f6620726f626265727320656e7465726564207468652062616e6b2c207468656972206c65616465722077656e7420746f20746865206d616e6167657220616e642061736b65642068696d20746f206f70656e20746865207661756c742e20486520746872656174656e656420746865206d616e6167657220627920736179696e672c2027496620796f752074727920746f20646f20616e797468696e6720736d6172742c20796f752772652066696374696f6e2e2720546865206d616e616765722077617320636f6e667573656420616e642061736b65642068696d2c2027446f6e277420796f75206d65616e2027596f752061726520686973746f7279273f272054686520726f6262657220616e6772696c79207265706c696564206261636b2c2027446f206e6f74206368616e676520746865207375626a6563742c206f6b61793f27",
                        "id": 70,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2241:339:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_778f4b2df5b5712b9a71447cefe952e549914602e55137cf08959a477449efcf",
                          "typeString": "literal_string \"As a group of robbers entered the bank, their leader went to the manager and asked him to open the vault. He threatened the manager by saying, 'If you try to do anything smart, you're fiction.' The manager was confused and asked him, 'Don't you mean 'You are history'?' The robber angrily replied back, 'Do not change the subject, okay?'\""
                        },
                        "value": "As a group of robbers entered the bank, their leader went to the manager and asked him to open the vault. He threatened the manager by saying, 'If you try to do anything smart, you're fiction.' The manager was confused and asked him, 'Don't you mean 'You are history'?' The robber angrily replied back, 'Do not change the subject, okay?'"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        {
                          "typeIdentifier": "t_stringliteral_778f4b2df5b5712b9a71447cefe952e549914602e55137cf08959a477449efcf",
                          "typeString": "literal_string \"As a group of robbers entered the bank, their leader went to the manager and asked him to open the vault. He threatened the manager by saying, 'If you try to do anything smart, you're fiction.' The manager was confused and asked him, 'Don't you mean 'You are history'?' The robber angrily replied back, 'Do not change the subject, okay?'\""
                        }
                      ],
                      "id": 68,
                      "name": "setJoke",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 95,
                      "src": "2229:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 71,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2229:352:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 72,
                  "nodeType": "ExpressionStatement",
                  "src": "2229:352:0"
                }
              ]
            },
            "documentation": null,
            "id": 74,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 16,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "282:2:0"
            },
            "returnParameters": {
              "id": 17,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "292:0:0"
            },
            "scope": 96,
            "src": "271:2318:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 94,
              "nodeType": "Block",
              "src": "2666:95:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 82,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "2677:12:0",
                    "subExpression": {
                      "argumentTypes": null,
                      "id": 81,
                      "name": "jokesCount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4,
                      "src": "2677:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 83,
                  "nodeType": "ExpressionStatement",
                  "src": "2677:12:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 92,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 84,
                        "name": "jokes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15,
                        "src": "2700:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Joke_$11_storage_$",
                          "typeString": "mapping(uint256 => struct Jokes.Joke storage ref)"
                        }
                      },
                      "id": 86,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 85,
                        "name": "jokesCount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4,
                        "src": "2706:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2700:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Joke_$11_storage",
                        "typeString": "struct Jokes.Joke storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 88,
                          "name": "jokesCount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4,
                          "src": "2725:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 89,
                          "name": "joke",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 76,
                          "src": "2737:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 90,
                          "name": "punchline",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 78,
                          "src": "2743:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          },
                          {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        ],
                        "id": 87,
                        "name": "Joke",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11,
                        "src": "2720:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Joke_$11_storage_ptr_$",
                          "typeString": "type(struct Jokes.Joke storage pointer)"
                        }
                      },
                      "id": 91,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2720:33:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Joke_$11_memory",
                        "typeString": "struct Jokes.Joke memory"
                      }
                    },
                    "src": "2700:53:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Joke_$11_storage",
                      "typeString": "struct Jokes.Joke storage ref"
                    }
                  },
                  "id": 93,
                  "nodeType": "ExpressionStatement",
                  "src": "2700:53:0"
                }
              ]
            },
            "documentation": null,
            "id": 95,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setJoke",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 79,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76,
                  "name": "joke",
                  "nodeType": "VariableDeclaration",
                  "scope": 95,
                  "src": "2614:18:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 75,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2614:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 78,
                  "name": "punchline",
                  "nodeType": "VariableDeclaration",
                  "scope": 95,
                  "src": "2634:23:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 77,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2634:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2613:45:0"
            },
            "returnParameters": {
              "id": 80,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2666:0:0"
            },
            "scope": 96,
            "src": "2597:164:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 97,
        "src": "76:2688:0"
      }
    ],
    "src": "40:2724:0"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/contracts/Jokes.sol",
      "exportedSymbols": {
        "Jokes": [
          96
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            ">=",
            "0.4",
            ".22",
            "<",
            "0.9",
            ".0"
          ]
        },
        "id": 1,
        "name": "PragmaDirective",
        "src": "40:32:0"
      },
      {
        "attributes": {
          "baseContracts": [
            null
          ],
          "contractDependencies": [
            null
          ],
          "contractKind": "contract",
          "documentation": null,
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            96
          ],
          "name": "Jokes",
          "scope": 97
        },
        "children": [
          {
            "attributes": {
              "constant": false,
              "name": "jokesCount",
              "scope": 96,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "uint256",
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "name": "uint",
                  "type": "uint256"
                },
                "id": 2,
                "name": "ElementaryTypeName",
                "src": "98:4:0"
              },
              {
                "attributes": {
                  "argumentTypes": null,
                  "hexvalue": "30",
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "subdenomination": null,
                  "token": "number",
                  "type": "int_const 0",
                  "value": "0"
                },
                "id": 3,
                "name": "Literal",
                "src": "123:1:0"
              }
            ],
            "id": 4,
            "name": "VariableDeclaration",
            "src": "98:26:0"
          },
          {
            "attributes": {
              "canonicalName": "Jokes.Joke",
              "name": "Joke",
              "scope": 96,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "constant": false,
                  "name": "id",
                  "scope": 11,
                  "stateVariable": false,
                  "storageLocation": "default",
                  "type": "uint256",
                  "value": null,
                  "visibility": "internal"
                },
                "children": [
                  {
                    "attributes": {
                      "name": "uint",
                      "type": "uint256"
                    },
                    "id": 5,
                    "name": "ElementaryTypeName",
                    "src": "156:4:0"
                  }
                ],
                "id": 6,
                "name": "VariableDeclaration",
                "src": "156:7:0"
              },
              {
                "attributes": {
                  "constant": false,
                  "name": "joke",
                  "scope": 11,
                  "stateVariable": false,
                  "storageLocation": "default",
                  "type": "string",
                  "value": null,
                  "visibility": "internal"
                },
                "children": [
                  {
                    "attributes": {
                      "name": "string",
                      "type": "string"
                    },
                    "id": 7,
                    "name": "ElementaryTypeName",
                    "src": "174:6:0"
                  }
                ],
                "id": 8,
                "name": "VariableDeclaration",
                "src": "174:11:0"
              },
              {
                "attributes": {
                  "constant": false,
                  "name": "punchline",
                  "scope": 11,
                  "stateVariable": false,
                  "storageLocation": "default",
                  "type": "string",
                  "value": null,
                  "visibility": "internal"
                },
                "children": [
                  {
                    "attributes": {
                      "name": "string",
                      "type": "string"
                    },
                    "id": 9,
                    "name": "ElementaryTypeName",
                    "src": "196:6:0"
                  }
                ],
                "id": 10,
                "name": "VariableDeclaration",
                "src": "196:16:0"
              }
            ],
            "id": 11,
            "name": "StructDefinition",
            "src": "133:87:0"
          },
          {
            "attributes": {
              "constant": false,
              "name": "jokes",
              "scope": 96,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "mapping(uint256 => struct Jokes.Joke)",
              "value": null,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "type": "mapping(uint256 => struct Jokes.Joke)"
                },
                "children": [
                  {
                    "attributes": {
                      "name": "uint",
                      "type": "uint256"
                    },
                    "id": 12,
                    "name": "ElementaryTypeName",
                    "src": "236:4:0"
                  },
                  {
                    "attributes": {
                      "contractScope": null,
                      "name": "Joke",
                      "referencedDeclaration": 11,
                      "type": "struct Jokes.Joke"
                    },
                    "id": 13,
                    "name": "UserDefinedTypeName",
                    "src": "244:4:0"
                  }
                ],
                "id": 14,
                "name": "Mapping",
                "src": "228:21:0"
              }
            ],
            "id": 15,
            "name": "VariableDeclaration",
            "src": "228:34:0"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": true,
              "kind": "constructor",
              "modifiers": [
                null
              ],
              "name": "",
              "scope": 96,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 16,
                "name": "ParameterList",
                "src": "282:2:0"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 17,
                "name": "ParameterList",
                "src": "292:0:0"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_097b195636f9cbef85f5416471ea23a888dbc6343e646e81ea0678b308806864",
                                  "typeString": "literal_string \"What's the best thing about Switzerland?\""
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_eed0618017a4e108a248a5b8be203c7e710878d15391fcf1d6a2d19fc1148aee",
                                  "typeString": "literal_string \"I don't know, but the flag is a big plus.\""
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 95,
                              "type": "function (string memory,string memory)",
                              "value": "setJoke"
                            },
                            "id": 18,
                            "name": "Identifier",
                            "src": "303:7:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "576861742773207468652062657374207468696e672061626f757420537769747a65726c616e643f",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"What's the best thing about Switzerland?\"",
                              "value": "What's the best thing about Switzerland?"
                            },
                            "id": 19,
                            "name": "Literal",
                            "src": "311:42:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "4920646f6e2774206b6e6f772c206275742074686520666c616720697320612062696720706c75732e",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"I don't know, but the flag is a big plus.\"",
                              "value": "I don't know, but the flag is a big plus."
                            },
                            "id": 20,
                            "name": "Literal",
                            "src": "355:43:0"
                          }
                        ],
                        "id": 21,
                        "name": "FunctionCall",
                        "src": "303:96:0"
                      }
                    ],
                    "id": 22,
                    "name": "ExpressionStatement",
                    "src": "303:96:0"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_6eb81b039c5c5bf5d26576877a91bfc476bbe23865bb32ae241a3f1c8c3e82bc",
                                  "typeString": "literal_string \"I invented a new word!\""
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_6c7da35e51da3a040eb53be4e61caeb0672d21bd168cab425f42f8519da1f5a7",
                                  "typeString": "literal_string \"Plagiarism!\""
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 95,
                              "type": "function (string memory,string memory)",
                              "value": "setJoke"
                            },
                            "id": 23,
                            "name": "Identifier",
                            "src": "410:7:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "4920696e76656e7465642061206e657720776f726421",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"I invented a new word!\"",
                              "value": "I invented a new word!"
                            },
                            "id": 24,
                            "name": "Literal",
                            "src": "418:24:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "506c616769617269736d21",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"Plagiarism!\"",
                              "value": "Plagiarism!"
                            },
                            "id": 25,
                            "name": "Literal",
                            "src": "444:13:0"
                          }
                        ],
                        "id": 26,
                        "name": "FunctionCall",
                        "src": "410:48:0"
                      }
                    ],
                    "id": 27,
                    "name": "ExpressionStatement",
                    "src": "410:48:0"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_1554fbdcaca6859ce9a18170911248d96086c1e6be8296fd981b94ab01bda307",
                                  "typeString": "literal_string \"In my neighborhood, there was a couple who had given their twin sons very weird names. One was named Trouble, while the other boy's name was Mind Your Own Business. So, one day they were playing hide and seek. Mind Your Business counted to a hundred and then started looking for his brother. But, somehow he couldn't find him anywhere. He saw a police car passing the neighborhood, so he stopped it to ask for help. When the police officer asked him for his name, he replied, 'Mind Your Own Business!' Feeling insulted, the police officer still asked politely who he was looking for. Mind Your Own Business replied, 'I am looking for Trouble!'\""
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 95,
                              "type": "function (string memory,string memory)",
                              "value": "setJoke"
                            },
                            "id": 28,
                            "name": "Identifier",
                            "src": "469:7:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"\"",
                              "value": ""
                            },
                            "id": 29,
                            "name": "Literal",
                            "src": "477:2:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "496e206d79206e65696768626f72686f6f642c20746865726520776173206120636f75706c652077686f2068616420676976656e207468656972207477696e20736f6e732076657279207765697264206e616d65732e204f6e6520776173206e616d65642054726f75626c652c207768696c6520746865206f7468657220626f792773206e616d6520776173204d696e6420596f7572204f776e20427573696e6573732e20536f2c206f6e65206461792074686579207765726520706c6179696e67206869646520616e64207365656b2e204d696e6420596f757220427573696e65737320636f756e74656420746f20612068756e6472656420616e64207468656e2073746172746564206c6f6f6b696e6720666f72206869732062726f746865722e204275742c20736f6d65686f7720686520636f756c646e27742066696e642068696d20616e7977686572652e20486520736177206120706f6c696365206361722070617373696e6720746865206e65696768626f72686f6f642c20736f2068652073746f7070656420697420746f2061736b20666f722068656c702e205768656e2074686520706f6c696365206f6666696365722061736b65642068696d20666f7220686973206e616d652c206865207265706c6965642c20274d696e6420596f7572204f776e20427573696e6573732127204665656c696e6720696e73756c7465642c2074686520706f6c696365206f666669636572207374696c6c2061736b656420706f6c6974656c792077686f20686520776173206c6f6f6b696e6720666f722e204d696e6420596f7572204f776e20427573696e657373207265706c6965642c20274920616d206c6f6f6b696e6720666f722054726f75626c652127",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"In my neighborhood, there was a couple who had given their twin sons very weird names. One was named Trouble, while the other boy's name was Mind Your Own Business. So, one day they were playing hide and seek. Mind Your Business counted to a hundred and then started looking for his brother. But, somehow he couldn't find him anywhere. He saw a police car passing the neighborhood, so he stopped it to ask for help. When the police officer asked him for his name, he replied, 'Mind Your Own Business!' Feeling insulted, the police officer still asked politely who he was looking for. Mind Your Own Business replied, 'I am looking for Trouble!'\"",
                              "value": "In my neighborhood, there was a couple who had given their twin sons very weird names. One was named Trouble, while the other boy's name was Mind Your Own Business. So, one day they were playing hide and seek. Mind Your Business counted to a hundred and then started looking for his brother. But, somehow he couldn't find him anywhere. He saw a police car passing the neighborhood, so he stopped it to ask for help. When the police officer asked him for his name, he replied, 'Mind Your Own Business!' Feeling insulted, the police officer still asked politely who he was looking for. Mind Your Own Business replied, 'I am looking for Trouble!'"
                            },
                            "id": 30,
                            "name": "Literal",
                            "src": "481:645:0"
                          }
                        ],
                        "id": 31,
                        "name": "FunctionCall",
                        "src": "469:658:0"
                      }
                    ],
                    "id": 32,
                    "name": "ExpressionStatement",
                    "src": "469:658:0"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_8713e6e222748625aa906e76d123025b838ffdc6e345205728adbfa70a00c4cd",
                                  "typeString": "literal_string \"Did you hear about the claustrophobic astronaut?\""
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_d14abf1900cf1a4d739015d8388e4e2f3951f439ed4acee1ece0230b4ff1c71f",
                                  "typeString": "literal_string \"He just needed a little space.\""
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 95,
                              "type": "function (string memory,string memory)",
                              "value": "setJoke"
                            },
                            "id": 33,
                            "name": "Identifier",
                            "src": "1138:7:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "44696420796f7520686561722061626f75742074686520636c61757374726f70686f62696320617374726f6e6175743f",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"Did you hear about the claustrophobic astronaut?\"",
                              "value": "Did you hear about the claustrophobic astronaut?"
                            },
                            "id": 34,
                            "name": "Literal",
                            "src": "1146:50:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "4865206a757374206e65656465642061206c6974746c652073706163652e",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"He just needed a little space.\"",
                              "value": "He just needed a little space."
                            },
                            "id": 35,
                            "name": "Literal",
                            "src": "1198:32:0"
                          }
                        ],
                        "id": 36,
                        "name": "FunctionCall",
                        "src": "1138:93:0"
                      }
                    ],
                    "id": 37,
                    "name": "ExpressionStatement",
                    "src": "1138:93:0"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_d1268c80db442142696ec9cc9a67011bcd75dbb4541a9eba394a536d28a97056",
                                  "typeString": "literal_string \"Why did the yogurt go to the art exhibition?\""
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_b45fcffb98366ffd92a1d6c212d2ea63e1f3c9b2bb3ca869dc1e6de902dbfa35",
                                  "typeString": "literal_string \"Because it was cultured.\""
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 95,
                              "type": "function (string memory,string memory)",
                              "value": "setJoke"
                            },
                            "id": 38,
                            "name": "Identifier",
                            "src": "1242:7:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "576879206469642074686520796f6775727420676f20746f20746865206172742065786869626974696f6e3f",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"Why did the yogurt go to the art exhibition?\"",
                              "value": "Why did the yogurt go to the art exhibition?"
                            },
                            "id": 39,
                            "name": "Literal",
                            "src": "1250:46:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "42656361757365206974207761732063756c74757265642e",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"Because it was cultured.\"",
                              "value": "Because it was cultured."
                            },
                            "id": 40,
                            "name": "Literal",
                            "src": "1298:26:0"
                          }
                        ],
                        "id": 41,
                        "name": "FunctionCall",
                        "src": "1242:83:0"
                      }
                    ],
                    "id": 42,
                    "name": "ExpressionStatement",
                    "src": "1242:83:0"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_679129f0f887d654ad62280afd16b9eed6f61c922dd3295f0de025761a5d2bcc",
                                  "typeString": "literal_string \"What do you call an apology written in dots and dashes?\""
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_4901f0f5768b552ba650711232bbb310b18ff4c60350adfb99d344d4960b4ade",
                                  "typeString": "literal_string \"Re-Morse code.\""
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 95,
                              "type": "function (string memory,string memory)",
                              "value": "setJoke"
                            },
                            "id": 43,
                            "name": "Identifier",
                            "src": "1336:7:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "5768617420646f20796f752063616c6c20616e2061706f6c6f6779207772697474656e20696e20646f747320616e64206461736865733f",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"What do you call an apology written in dots and dashes?\"",
                              "value": "What do you call an apology written in dots and dashes?"
                            },
                            "id": 44,
                            "name": "Literal",
                            "src": "1344:57:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "52652d4d6f72736520636f64652e",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"Re-Morse code.\"",
                              "value": "Re-Morse code."
                            },
                            "id": 45,
                            "name": "Literal",
                            "src": "1403:16:0"
                          }
                        ],
                        "id": 46,
                        "name": "FunctionCall",
                        "src": "1336:84:0"
                      }
                    ],
                    "id": 47,
                    "name": "ExpressionStatement",
                    "src": "1336:84:0"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_6d03c621f27068910ef0c8904632b6cf00321e1e89f7054cba14a3124ebd4b76",
                                  "typeString": "literal_string \"Why did the hipster burn his mouth?\""
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_4f671ff17695acf7b50b3fb9e4df3840d90343bedbd6a40f359897209af89594",
                                  "typeString": "literal_string \"He drank the coffee before it was cool.\""
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 95,
                              "type": "function (string memory,string memory)",
                              "value": "setJoke"
                            },
                            "id": 48,
                            "name": "Identifier",
                            "src": "1431:7:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "57687920646964207468652068697073746572206275726e20686973206d6f7574683f",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"Why did the hipster burn his mouth?\"",
                              "value": "Why did the hipster burn his mouth?"
                            },
                            "id": 49,
                            "name": "Literal",
                            "src": "1439:37:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "4865206472616e6b2074686520636f66666565206265666f72652069742077617320636f6f6c2e",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"He drank the coffee before it was cool.\"",
                              "value": "He drank the coffee before it was cool."
                            },
                            "id": 50,
                            "name": "Literal",
                            "src": "1478:41:0"
                          }
                        ],
                        "id": 51,
                        "name": "FunctionCall",
                        "src": "1431:89:0"
                      }
                    ],
                    "id": 52,
                    "name": "ExpressionStatement",
                    "src": "1431:89:0"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_e059b0099b4aa13ca1d54b5e0d69e5375bd0d547c97d89f7aed2b8fbd4208919",
                                  "typeString": "literal_string \" I was in a barbershop when a man and his young son walked in to get a haircut. The man asked the barber to give his son a haircut while he shopped for groceries nearby. The barber finished giving the haircut but there was no sign of the father. An hour passed, two hours passed. We finally asked the son where his father was. The boy shocked us by saying, 'That man was not my father. He just told me that if I wanted to get a free haircut at the barbershop, I should come with him.'\""
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 95,
                              "type": "function (string memory,string memory)",
                              "value": "setJoke"
                            },
                            "id": 53,
                            "name": "Identifier",
                            "src": "1531:7:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"\"",
                              "value": ""
                            },
                            "id": 54,
                            "name": "Literal",
                            "src": "1539:2:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "20492077617320696e20612062617262657273686f70207768656e2061206d616e20616e642068697320796f756e6720736f6e2077616c6b656420696e20746f20676574206120686169726375742e20546865206d616e2061736b6564207468652062617262657220746f20676976652068697320736f6e20612068616972637574207768696c652068652073686f7070656420666f722067726f636572696573206e65617262792e20546865206261726265722066696e697368656420676976696e672074686520686169726375742062757420746865726520776173206e6f207369676e206f6620746865206661746865722e20416e20686f7572207061737365642c2074776f20686f757273207061737365642e2057652066696e616c6c792061736b65642074686520736f6e2077686572652068697320666174686572207761732e2054686520626f792073686f636b656420757320627920736179696e672c202754686174206d616e20776173206e6f74206d79206661746865722e204865206a75737420746f6c64206d65207468617420696620492077616e74656420746f20676574206120667265652068616972637574206174207468652062617262657273686f702c20492073686f756c6420636f6d6520776974682068696d2e27",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \" I was in a barbershop when a man and his young son walked in to get a haircut. The man asked the barber to give his son a haircut while he shopped for groceries nearby. The barber finished giving the haircut but there was no sign of the father. An hour passed, two hours passed. We finally asked the son where his father was. The boy shocked us by saying, 'That man was not my father. He just told me that if I wanted to get a free haircut at the barbershop, I should come with him.'\"",
                              "value": " I was in a barbershop when a man and his young son walked in to get a haircut. The man asked the barber to give his son a haircut while he shopped for groceries nearby. The barber finished giving the haircut but there was no sign of the father. An hour passed, two hours passed. We finally asked the son where his father was. The boy shocked us by saying, 'That man was not my father. He just told me that if I wanted to get a free haircut at the barbershop, I should come with him.'"
                            },
                            "id": 55,
                            "name": "Literal",
                            "src": "1543:486:0"
                          }
                        ],
                        "id": 56,
                        "name": "FunctionCall",
                        "src": "1531:499:0"
                      }
                    ],
                    "id": 57,
                    "name": "ExpressionStatement",
                    "src": "1531:499:0"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_e58db5450a425eccb1f2e8cbe07e91f6cf9b1297955d4fd0fdf64e7ddc008fdb",
                                  "typeString": "literal_string \"What do you get from a pampered cow?\""
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_4a3a9c4c0070b9bcff9800a96f8a9be9c1d9399bc48d9c3dce159102e52ed1f0",
                                  "typeString": "literal_string \"Spoiled milk.\""
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 95,
                              "type": "function (string memory,string memory)",
                              "value": "setJoke"
                            },
                            "id": 58,
                            "name": "Identifier",
                            "src": "2041:7:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "5768617420646f20796f75206765742066726f6d20612070616d706572656420636f773f",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"What do you get from a pampered cow?\"",
                              "value": "What do you get from a pampered cow?"
                            },
                            "id": 59,
                            "name": "Literal",
                            "src": "2049:38:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "53706f696c6564206d696c6b2e",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"Spoiled milk.\"",
                              "value": "Spoiled milk."
                            },
                            "id": 60,
                            "name": "Literal",
                            "src": "2089:15:0"
                          }
                        ],
                        "id": 61,
                        "name": "FunctionCall",
                        "src": "2041:64:0"
                      }
                    ],
                    "id": 62,
                    "name": "ExpressionStatement",
                    "src": "2041:64:0"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_4eeef4c150718b2e547cd4c4b4fddbb8878b9b8797b9399a37589b028ca2d210",
                                  "typeString": "literal_string \"What breed of dog can jump higher than buildings?\""
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_57cc716367f24fabacf49bf7a865b40909f8af30c746a97d261fc0232ed0b0a7",
                                  "typeString": "literal_string \"Any dog, because buildings can't jump.\""
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 95,
                              "type": "function (string memory,string memory)",
                              "value": "setJoke"
                            },
                            "id": 63,
                            "name": "Identifier",
                            "src": "2116:7:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "57686174206272656564206f6620646f672063616e206a756d7020686967686572207468616e206275696c64696e67733f",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"What breed of dog can jump higher than buildings?\"",
                              "value": "What breed of dog can jump higher than buildings?"
                            },
                            "id": 64,
                            "name": "Literal",
                            "src": "2124:51:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "416e7920646f672c2062656361757365206275696c64696e67732063616e2774206a756d702e",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"Any dog, because buildings can't jump.\"",
                              "value": "Any dog, because buildings can't jump."
                            },
                            "id": 65,
                            "name": "Literal",
                            "src": "2177:40:0"
                          }
                        ],
                        "id": 66,
                        "name": "FunctionCall",
                        "src": "2116:102:0"
                      }
                    ],
                    "id": 67,
                    "name": "ExpressionStatement",
                    "src": "2116:102:0"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_778f4b2df5b5712b9a71447cefe952e549914602e55137cf08959a477449efcf",
                                  "typeString": "literal_string \"As a group of robbers entered the bank, their leader went to the manager and asked him to open the vault. He threatened the manager by saying, 'If you try to do anything smart, you're fiction.' The manager was confused and asked him, 'Don't you mean 'You are history'?' The robber angrily replied back, 'Do not change the subject, okay?'\""
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 95,
                              "type": "function (string memory,string memory)",
                              "value": "setJoke"
                            },
                            "id": 68,
                            "name": "Identifier",
                            "src": "2229:7:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"\"",
                              "value": ""
                            },
                            "id": 69,
                            "name": "Literal",
                            "src": "2237:2:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "417320612067726f7570206f6620726f626265727320656e7465726564207468652062616e6b2c207468656972206c65616465722077656e7420746f20746865206d616e6167657220616e642061736b65642068696d20746f206f70656e20746865207661756c742e20486520746872656174656e656420746865206d616e6167657220627920736179696e672c2027496620796f752074727920746f20646f20616e797468696e6720736d6172742c20796f752772652066696374696f6e2e2720546865206d616e616765722077617320636f6e667573656420616e642061736b65642068696d2c2027446f6e277420796f75206d65616e2027596f752061726520686973746f7279273f272054686520726f6262657220616e6772696c79207265706c696564206261636b2c2027446f206e6f74206368616e676520746865207375626a6563742c206f6b61793f27",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"As a group of robbers entered the bank, their leader went to the manager and asked him to open the vault. He threatened the manager by saying, 'If you try to do anything smart, you're fiction.' The manager was confused and asked him, 'Don't you mean 'You are history'?' The robber angrily replied back, 'Do not change the subject, okay?'\"",
                              "value": "As a group of robbers entered the bank, their leader went to the manager and asked him to open the vault. He threatened the manager by saying, 'If you try to do anything smart, you're fiction.' The manager was confused and asked him, 'Don't you mean 'You are history'?' The robber angrily replied back, 'Do not change the subject, okay?'"
                            },
                            "id": 70,
                            "name": "Literal",
                            "src": "2241:339:0"
                          }
                        ],
                        "id": 71,
                        "name": "FunctionCall",
                        "src": "2229:352:0"
                      }
                    ],
                    "id": 72,
                    "name": "ExpressionStatement",
                    "src": "2229:352:0"
                  }
                ],
                "id": 73,
                "name": "Block",
                "src": "292:2297:0"
              }
            ],
            "id": 74,
            "name": "FunctionDefinition",
            "src": "271:2318:0"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "setJoke",
              "scope": 96,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "public"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "joke",
                      "scope": 95,
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "type": "string",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "string",
                          "type": "string"
                        },
                        "id": 75,
                        "name": "ElementaryTypeName",
                        "src": "2614:6:0"
                      }
                    ],
                    "id": 76,
                    "name": "VariableDeclaration",
                    "src": "2614:18:0"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "punchline",
                      "scope": 95,
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "type": "string",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "string",
                          "type": "string"
                        },
                        "id": 77,
                        "name": "ElementaryTypeName",
                        "src": "2634:6:0"
                      }
                    ],
                    "id": 78,
                    "name": "VariableDeclaration",
                    "src": "2634:23:0"
                  }
                ],
                "id": 79,
                "name": "ParameterList",
                "src": "2613:45:0"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 80,
                "name": "ParameterList",
                "src": "2666:0:0"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "++",
                          "prefix": false,
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 4,
                              "type": "uint256",
                              "value": "jokesCount"
                            },
                            "id": 81,
                            "name": "Identifier",
                            "src": "2677:10:0"
                          }
                        ],
                        "id": 82,
                        "name": "UnaryOperation",
                        "src": "2677:12:0"
                      }
                    ],
                    "id": 83,
                    "name": "ExpressionStatement",
                    "src": "2677:12:0"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "struct Jokes.Joke storage ref"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "type": "struct Jokes.Joke storage ref"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 15,
                                  "type": "mapping(uint256 => struct Jokes.Joke storage ref)",
                                  "value": "jokes"
                                },
                                "id": 84,
                                "name": "Identifier",
                                "src": "2700:5:0"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 4,
                                  "type": "uint256",
                                  "value": "jokesCount"
                                },
                                "id": 85,
                                "name": "Identifier",
                                "src": "2706:10:0"
                              }
                            ],
                            "id": 86,
                            "name": "IndexAccess",
                            "src": "2700:17:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "isStructConstructorCall": true,
                              "lValueRequested": false,
                              "names": [
                                null
                              ],
                              "type": "struct Jokes.Joke memory",
                              "type_conversion": false
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    },
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  ],
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 11,
                                  "type": "type(struct Jokes.Joke storage pointer)",
                                  "value": "Joke"
                                },
                                "id": 87,
                                "name": "Identifier",
                                "src": "2720:4:0"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 4,
                                  "type": "uint256",
                                  "value": "jokesCount"
                                },
                                "id": 88,
                                "name": "Identifier",
                                "src": "2725:10:0"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 76,
                                  "type": "string memory",
                                  "value": "joke"
                                },
                                "id": 89,
                                "name": "Identifier",
                                "src": "2737:4:0"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 78,
                                  "type": "string memory",
                                  "value": "punchline"
                                },
                                "id": 90,
                                "name": "Identifier",
                                "src": "2743:9:0"
                              }
                            ],
                            "id": 91,
                            "name": "FunctionCall",
                            "src": "2720:33:0"
                          }
                        ],
                        "id": 92,
                        "name": "Assignment",
                        "src": "2700:53:0"
                      }
                    ],
                    "id": 93,
                    "name": "ExpressionStatement",
                    "src": "2700:53:0"
                  }
                ],
                "id": 94,
                "name": "Block",
                "src": "2666:95:0"
              }
            ],
            "id": 95,
            "name": "FunctionDefinition",
            "src": "2597:164:0"
          }
        ],
        "id": 96,
        "name": "ContractDefinition",
        "src": "76:2688:0"
      }
    ],
    "id": 97,
    "name": "SourceUnit",
    "src": "40:2724:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {},
      "links": {},
      "address": "0xCeCfE5f5E243fd27c269258CA970C0B10Da56561",
      "transactionHash": "0xdee46a7bf46590bfae6e839c2c7e107cc598f32f7c8fa958da1604e30eeb46ae"
    }
  },
  "schemaVersion": "3.4.4",
  "updatedAt": "2022-02-07T04:03:00.108Z",
  "networkType": "ethereum",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}